SQL Partee



-- ============================
--  DATABASE: PARTEE Bookings
--  Compatible with Supabase (PostgreSQL)
-- ============================

-- 1️⃣ USERS / CUSTOMERS
CREATE TABLE public.customers (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  full_name TEXT NOT NULL,
  birthday DATE NOT NULL,
  contact_number TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2️⃣ REGULAR BOOKINGS
CREATE TABLE public.regular_bookings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  customer_id UUID REFERENCES public.customers(id) ON DELETE CASCADE,
  event_date DATE NOT NULL,
  num_guests INT CHECK (num_guests > 0),
  event_type TEXT CHECK (event_type IN ('Birthday', 'Celebration', 'Private Party', 'Other')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3️⃣ VIP BOOKINGS
CREATE TABLE public.vip_bookings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  customer_id UUID REFERENCES public.customers(id) ON DELETE CASCADE,
  event_date DATE NOT NULL,
  num_guests INT CHECK (num_guests > 0),
  event_type TEXT CHECK (event_type IN ('Birthday', 'Celebration', 'Private Party', 'Other')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4️⃣ VIP SEAT SELECTION
CREATE TABLE public.vip_seats (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  booking_id UUID REFERENCES public.vip_bookings(id) ON DELETE CASCADE,
  table_name TEXT NOT NULL,
  seat_code TEXT NOT NULL,
  is_reserved BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE (table_name, seat_code)  -- prevents double booking of same seat
);

-- 5️⃣ PAYMENTS
CREATE TABLE public.payments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  booking_id UUID NOT NULL,  -- can reference regular or VIP booking
  booking_type TEXT CHECK (booking_type IN ('regular', 'vip')),
  total_amount NUMERIC(10,2) NOT NULL,
  payment_method TEXT CHECK (payment_method IN ('GCash', 'Maya', 'GrabPay')),
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'paid', 'failed')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 6️⃣ HELPER VIEW (optional)
-- Combine all bookings into one view for analytics or dashboard



CREATE VIEW public.all_bookings AS
SELECT
  'regular' AS booking_type,
  rb.id AS booking_id,
  c.full_name,
  rb.event_date,
  rb.num_guests,
  rb.event_type,
  rb.created_at
FROM public.regular_bookings rb
JOIN public.customers c ON rb.customer_id = c.id
UNION ALL
SELECT
  'vip' AS booking_type,
  vb.id AS booking_id,
  c.full_name,
  vb.event_date,
  vb.num_guests,
  vb.event_type,
  vb.created_at
FROM public.vip_bookings vb
JOIN public.customers c ON vb.customer_id = c.id;
